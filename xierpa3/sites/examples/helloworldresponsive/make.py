# -*- coding: UTF-8 -*-
# -----------------------------------------------------------------------------
#    xierpa server
#    Copyright (c) 2014+  buro@petr.com, www.petr.com, www.xierpa.com
#    
#    X I E R P A  3
#    Distribution by the MIT License.
#
# -----------------------------------------------------------------------------
#
#    make.py
#
#    Demo site for the simple "hello world" example.
#    The "run.py" program creates the files:
#        ~/Xierpa3Examples/HelloWorldLayout/css/style.scss
#        ~/Xierpa3Examples/HelloWorldLayout/css/style.css
#        ~/Xierpa3Examples/HelloWorldLayout/index.html
#    from the one HelloWorldLayout theme instance by applying respectively the
#    CssBuilder and HtmlBuilder to the theme.
#    Each of the builders takes the information from the theme to build its
#    own type of file.
#
import webbrowser
from xierpa3.components import Theme, Page, Column, Container
from xierpa3.builders.cssbuilder import CssBuilder
from xierpa3.builders.htmlbuilder import HtmlBuilder
from xierpa3.attributes import Em, Margin, Color, Perc
from xierpa3.descriptors.media import Media # Include type of Style that holds @media parameters.

class HelloWorldResponsiveText(Column):

    # Get Constants->Config as class variable, so inheriting classes can redefine values.
    C = Column.C

    CSS_BODYFONT = 'Georgia, serif'
    CSS_CAPTIONFONT = CSS_BODYFONT
    
    def buildBlock(self, b):
        u"""Build the column. Note that although the "div" suggest that it is just
        HTML building there, the method get called both with **b** as CssBuilder
        and as HtmlBuilder. Each builder will filter out the appropriate attributes and
        translates it into its own syntax. The HTML tags generated by the article
        are set in CSS by the empty statements.
        Building the styled 2 text blocks, written out with duplicated values,
        as example how this works. See other examples for approaches with more
        cascading styled hierarchy."""
        b.div(class_=self.getClassName(), margin=Margin(0, self.C.AUTO), 
            color=Color('yellow'), # Translate color name to hex
            width=Perc(90), maxwidth=900, minwidth=300, backgroundcolor=Color('#222'),
            paddingtop=Em(0.5), paddingbottom=Em(0.5), fontfamily=self.CSS_BODYFONT, 
            fontsize=Em(3), textalign=self.C.CENTER, lineheight=Em(1.2),
            # Now define the @media parameters, where they belong: inside the definition of the element.
            # The media parameters are collected and sorted for output at the end of the CSS document.
            media=(
                # Example for table, show lighter background, change color of text and smaller size.
                Media(min=self.C.M_TABLET_MIN, max=self.C.M_TABLET_MAX, backgroundcolor=Color('#444'), 
                      color=Color('orange'), # Translate color name to hex. 
                      margin=0, fontsize=Em(2), width=self.C.AUTO, float=self.C.NONE),
                # For mobile, even more lighter background, change color of text and smaller size.
                Media(max=self.C.M_MOBILE_MAX, backgroundcolor=Color('#AAA'), 
                      color=Color('red'), # Translate color name to hex. 
                      margin=0, fontsize=Em(2), width=self.C.AUTO, float=self.C.NONE)
            ))
        b.text('Hello, world!')
        # One of the advantages of using a real programming language to generate 
        # HTML/CSS code, is that repetitions can be written as a loop. Not necessary
        # fewer lines, but more expandable and less redundant distribution of 
        # knowledge in the code.
        # This generates the same result as:
        #    b.div(class_='c1', display=self.NONE, fontsize=Em(0.5), color=self.WHITE,
        #        media=Media(min=self.M_DESKTOP_MIN, display=self.BLOCK))
        #    b.text('Responsive desktop mode.')
        #    b._div()
        #    b.div(class_='c2', display=self.NONE, fontsize=Em(0.5), color=self.WHITE,
        #        media=Media(min=self.M_TABLET_MIN, max=self.M_TABLET_MAX, display=self.BLOCK))
        #    b.text('Responsive tablet mode.')
        #    b._div()
        #    b.div(class_='c3', display=self.NONE, fontsize=Em(0.5), color=self.BLACK,
        #        media=Media(max=self.M_MOBILE_MAX, display=self.BLOCK))
        #    b.text('Responsive mobile mode.')
        #    b._div()
        #
        data = (
            # class, minWidth,          maxWidth,     text
            ('c1', self.C.M_DESKTOP_MIN, None, 'Responsive desktop mode.' ),
            ('c2', self.C.M_TABLET_MIN, self.C.M_TABLET_MAX, 'Responsive tablet mode.' ),
            ('c3', None, self.C.M_MOBILE_MAX, 'Responsive mobile mode..' ),
        )
        for class_, minWidth, maxWidth, text in data:
            b.div(class_=class_, display=self.C.NONE, fontsize=Em(0.5), color=Color(self.C.WHITE),
                background=self.C.NONE,
                media=Media(min=minWidth, max=maxWidth, display=self.C.BLOCK))
            b.text(text)
            b._div()

        b._div()
        b.div(class_=self.C.CLASS_CAPTION, color=Color('#888'), 
            width=Perc(100), maxwidth=700, minwidth=300,
            margin=Margin(0, self.C.AUTO), 
            paddingtop=Em(0.5), fontfamily=self.CSS_CAPTIONFONT, fontsize=Em(0.8), 
            textalign=self.C.CENTER, lineheight=Em(1.4), fontstyle=self.C.ITALIC,
        )
        b.text('Responsive page generated by Xierpa3.')
        b._div()
        
class HelloWorldResponsive(Theme):
    u"""The **HelloWorldResponsive** class implements a basic "Hello, world!" page, running as
    batch process, saving the result as an HTML file. Double click the generated file or
    drag to a browser see the result."""
    # Get Constants->Config as class variable, so inheriting classes can redefine values.
    C = Theme.C

    TITLE = u'The responsive "Hello, world!" page.' # Use as title of window.

    def baseStyle(self):
        u"""Answer the single basis style that will be defined as overall CSS, before
        specific block definitions start."""
        root = self.newStyle() # Create root style
        root.addStyle('body', backgroundcolor=Color(self.C.WHITE),
            # TODO: GLOBAL MEDIA SETTING DOES NOT WORK YET: media=Media(max=self.M_MOBILE_MAX, backgroundcolor='orange')
        )
        return root
        
    def baseComponents(self):
        u"""Create a theme site with just one single template home page. Answer a list
        of page instances that are used as templates for this site."""
        # Create an instance (=object) of the text component to be placed on the page.
        hw = HelloWorldResponsiveText()
        container = Container(components=hw)
        # Create an instance (=object) of the page, containing the "hw" component.
        # The class is also the page name in the url.
        # Components can be a single component or a list of components.
        homePage = Page(class_=self.C.TEMPLATE_INDEX, components=container, title=self.TITLE)
        # Answer a list of types of pages for this site.
        return [homePage]

    def make(self, root=None):
        u"""The instance of this class builds CSS and HTML files at the optional path **root**.
        If not defined, then the default ~/Desktop/Xierpa3Examples/[component.name] is used as export path,
        as set by Builder.DEFAULT_ROOTPATH"""
        # Create an "instance" (=object) of type "HelloWorldLayout". The type (=class) defines
        # the behavior of the object that is made by calling the class.

        # C S S
        # Create the main CSS builder instance to build the SASS/CSS part of the site.
        cssBuilder = CssBuilder()
        # Compile (=build) the SCSS to CSS and save the file in "css/style.css".
        self.build(cssBuilder) # Build from entire site theme, not just from template. Result is stream in builder.
        cssBuilder.save(self, root) 
    
        # H T M L
        # Create the main HTML builder instance to build the HTML part of the site.
        htmlBuilder = HtmlBuilder()
        # Compile the HTML and save the resulting HTML file in "helloWorld.html".
        self.build(htmlBuilder) # Build from entire site theme, not just from template. Result is stream in builder.
        # Answer the path, so we can directly open the file with a browser.
        return htmlBuilder.save(self, root)  
    
if __name__ == '__main__':
    # This construction "__name__ == '__main__'" makes this Python file only 
    # be executed when called in direct mode, such as "python make.py" in the terminal.         
    # Since no rootPath is added to make(), the file export is in ~/Desktop/Xierpa3Examples/HelloWorldResponsive/   
    path = HelloWorldResponsive().make()
    webbrowser.open(path)
