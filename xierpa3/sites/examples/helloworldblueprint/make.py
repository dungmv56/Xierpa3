# -*- coding: UTF-8 -*-
# -----------------------------------------------------------------------------
#    xierpa server
#    Copyright (c) 2014+  buro@petr.com, www.petr.com, www.xierpa.com
#    
#    X I E R P A  3
#    Distribution by the MIT License.
#
# -----------------------------------------------------------------------------
#
#    make.py
#
import webbrowser
from xierpa3.components import Theme, Page, Column 
from xierpa3.builders.cssbuilder import CssBuilder
from xierpa3.builders.htmlbuilder import HtmlBuilder
from xierpa3.attributes import Em, Margin 
from xierpa3.descriptors.media import Media 
from xierpa3.descriptors.blueprint import BluePrint

class HelloWorldResponsiveText(Column):
 
    CC = Column
    
    BLUEPRINT = BluePrint(
        
    )
    
    def buildBlock(self, b):
        u"""Build the column. Note that although the "div" suggest that it is just
        HTML building there, the method get called both with <b>b</b> as CssBuilder
        and as HtmlBuilder. Each builder will filter out the appropriate attributes and
        translates it into its own syntax. The HTML tags generated by the article
        are set in CSS by the empty statements.
        Building the styled 2 text blocks, written out with duplicated values,
        as example how this works. See other examples for approaches with more
        cascading styled hierarchy."""
        b.div(class_='column', color='yellow', margin=Margin(0, self.AUTO), 
            width='80%', maxwidth=700, minwidth=300, backgroundcolor='#222',
            paddingtop=Em(0.5), paddingbottom=Em(0.5), fontfamily=self.CSS_BODYFONT, 
            fontsize=Em(4), textalign=self.CENTER, lineheight=Em(1.2),
            # Now define the @media parameters, where they belong: inside the definition of the element.
            # The media parameters are collected and sorted for output at the end of the CSS document.
            media=(
               # Example for table, show lighter background, change color of text and smaller size.
               Media(min=self.M_TABLET_MIN, max=self.M_TABLET_MAX, backgroundcolor='#444', color='orange', 
                   fontsize=Em(3), width=self.C100),
               # For mobile, even more lighter background, change color of text and smaller size.
               Media(max=self.M_MOBILE_MAX, backgroundcolor='#BBB', color='red', fontsize=Em(2), 
                   width=self.C100)
            ))
        b.text('Hello world.')
        # One of the advantages of using a real programming language to generate 
        # HTML/CSS code, is that repetitions can be written as a loop. Not necessary
        # fewer lines, but more expandable and less redundant distribution of 
        # knowledge in the code.
        data = (
            # class, minWidth, maxWidth,  text
            ('c1', self.M_DESKTOP_MIN, None, 'Responsive desktop mode.' ),
            ('c2', self.M_TABLET_MIN, self.M_TABLET_MAX, 'Responsive tablet mode.' ),
            ('c3', None, self.M_MOBILE_MAX, 'Responsive mobile mode..' ),
        )
        for class_, minWidth, maxWidth, text in data:
            b.div(class_=class_, display=self.NONE, fontsize=Em(0.5), color=self.WHITE,
                media=Media(min=minWidth, max=maxWidth, display=self.BLOCK))
            b.text(text)
            b._div()
        """
        b.div(class_='c1', display=self.NONE, fontsize=Em(0.5), color=self.WHITE,
            media=Media(min=self.M_DESKTOP_MIN, display=self.BLOCK))
        b.text('Responsive desktop mode.')
        b._div()
        b.div(class_='c2', display=self.NONE, fontsize=Em(0.5), color=self.WHITE,
            media=Media(min=self.M_TABLET_MIN, max=self.M_TABLET_MAX, display=self.BLOCK))
        b.text('Responsive tablet mode.')
        b._div()
        b.div(class_='c3', display=self.NONE, fontsize=Em(0.5), color=self.BLACK,
            media=Media(max=self.M_MOBILE_MAX, display=self.BLOCK))
        b.text('Responsive mobile mode.')
        b._div()
        """
        b._div()
        b.div(class_=self.CLASS_CAPTION, color='#888', margin=Margin(0, self.AUTO), 
              width=self.C100, maxwidth=700, minwidth=300,
              paddingtop=Em(0.5), fontfamily=self.CSS_CAPTIONFONT, fontsize=Em(0.8), 
              textalign=self.CENTER, lineheight=Em(1.4), fontstyle=self.ITALIC,
              # Change background color of the line to indicate the illustrate the difference for mobile size.
              #media=Media(max=self.M_MOBILE_MAX, backgroundcolor='yellow', color='#222', fontsize=Em(1),
              #  margin=0, width=self.C100),
        )
        b.text('Generated by Xierpa3.')
        b._div()
        
class HelloWorldResponsive(Theme):
    u"""The <b>HelloWorldResponsive</b> class implements a basic Hello World page, running as
    batch process, saving the result as an HTML file. Double click the generated file or
    drag to a browser see the result."""
    TITLE = u'The responsive “Hello world” page.' # Use as title of window.

    def baseComponents(self):
        u"""Create a theme site with just one single template home page. Answer a list
        of page instances that are used as templates for this site."""
        # Create an instance (=object) of the text component to be placed on the page.
        hw = HelloWorldResponsiveText()
        # Create an instance (=object) of the page, containing the "hw" component.
        homePage = Page(components=(hw,), title=self.TITLE)
        # Answer a list of types of pages for this site.
        return [homePage]

    def make(self):
        u"""Make the instance of this class to build CSS and HTML."""
        # Create an "instance" (=object) of type "HelloWorldLayout". The type (=class) defines
        # the behavior of the object that is made by calling the class.

        # C S S
        # Create the main CSS builder instance to build the CSS part of the site.
        cssBuilder = CssBuilder()
        # Compile (=build) the SCSS to CSS and save the file in "css/style.css".
        cssBuilder.save(self) 
    
        # H T M L
        # Create the main HTML builder instance to build the HTML part of the site.
        htmlBuilder = HtmlBuilder()
        # Compile the HTML and save the resulting HTML file in "helloWorld.html".
        # Answer the path, so we can open the file with a browser.
        return htmlBuilder.save(self)  
    
if __name__ == '__main__':
    # This construction "__name__ == '__main__'" makes this Python file only 
    # be executed when called in direct mode, such as "python make.py" in the terminal.         
    path = HelloWorldResponsive().make()
    webbrowser.open(path)
