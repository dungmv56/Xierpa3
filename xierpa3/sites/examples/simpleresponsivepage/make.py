# -*- coding: UTF-8 -*-
# -----------------------------------------------------------------------------
#    xierpa server
#    Copyright (c) 2014+  buro@petr.com, www.petr.com, www.xierpa.com
#    
#    X I E R P A  3
#    Distribution by the MIT License.
#
# -----------------------------------------------------------------------------
#
#    make.py
#
import webbrowser
from xierpa3.components import Theme, Page, Column, Container
from xierpa3.builders.cssbuilder import CssBuilder
from xierpa3.builders.htmlbuilder import HtmlBuilder
from xierpa3.attributes import Em, Margin, Perc, Padding, Px, Color
from xierpa3.descriptors.media import Media # Include type of Style that holds @media parameters.
from xierpa3.descriptors.blueprint import BluePrint

class SimpleResponsiveText(Column):
    u"""The <b>SimpleResponsiveText</b> shows a simple heading and lorum ipsum text on 
    a colored background, where the styling depends on the screen size through @media selection."""
    
    # Sample string, we don't use data adapaters yet in this example.
    LORUMIPSUM = """Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel metus ullamcorper, 
    porttitor ligula id, sollicitudin ante. Sed molestie cursus tortor, ut blandit felis tincidunt at. Suspendisse 
    scelerisque malesuada massa, eu rhoncus nulla interdum ut. Morbi ullamcorper, leo pulvinar pharetra tincidunt, 
    dolor quam ullamcorper lectus, in dignissim magna odio ut eros. Nulla vel enim a leo hendrerit auctor luctus 
    nec urna. Donec ligula nunc, consequat ut aliquet in, auctor id nisl. Pellentesque malesuada tincidunt tortor, 
    varius sollicitudin lorem dictum vitae. Duis vel neque non leo commodo faucibus. In dictum in mauris eget 
    fermentum. Nunc feugiat vitae dolor mollis interdum. Suspendisse potenti. In hac habitasse platea dictumst. 
    Donec ac massa vel velit cursus posuere in a urna. Vestibulum porttitor lacus neque, eu scelerisque enim 
    scelerisque vitae."""
    # Get Constants->Config as class variable, so inheriting classes can redefine values.
    C = Column.C
    
    BLUEPRINT = BluePrint(
        margin=Margin(0, C.AUTO), doc_margin=u"Margin of the column",
        width=Perc(90), doc_width=u"Width of the main column.",
        padding=Padding(Em(0.5), Em(0.5), Em(0.5), Em(0.5)), doc_padding=u"Padding of column.",
        # Show @media transition by background color
        backgroundColor=Color('#BBB'), doc_backgroundColor=u'Column background color.',
        backgroundColorTablet=Color('#CCC'), doc_backgroundColorTablet=u'Column background color for tablet.',
        backgroundColorMobile=Color('#EEE'), doc_backgroundColorMobile=u'Column background color for mobile.', 
        # Text
        fontSize=Em(2), doc_fontSize=u'Column font size, relative to body font size.',
        fontSizeTablet=Em(1.8), doc_fontSizeTablet=u'Text font size for tablet, relative to body font size.',
        fontSizeMobile=Em(2.5), doc_fontSizeMobile=u'Text font size for mobile, relative to body font size.',
        color=Color('#000'), doc_color=u'Column text color.',
        colorTablet=Color('#111'), doc_colorTablet=u'Column text color for tablet.',
        colorMobile='red', doc_colorMobile=u'Column text color for mobile.',
        # h1
        h1Size=Em(2), doc_h1Size=u'h1 font size',
    )
    
    def buildBlock(self, b):
        u"""Build the column. Note that although the "div" suggest that it is just
        HTML building there, the method get called both with <b>b</b> as CssBuilder
        and as HtmlBuilder. Each builder will filter out the appropriate attributes and
        translates it into its own syntax. The HTML tags generated by the article
        are set in CSS by the empty statements.
        Building the styled 2 text blocks, written out with duplicated values,
        as example how this works. See other examples for approaches with more
        cascading styled hierarchy."""
        s = self.style
        b.div(class_=self.getClassName(), color=s.color, margin=s.margin, width=s.width,
            backgroundcolor=s.backgroundColor, fontsize=s.fontSize, padding=s.padding, 
            textalign=self.C.LEFT,
            # Now define the @media parameters, where they belong: inside the definition of the element.
            # The media parameters are collected and sorted for output at the end of the CSS document.
            media=(
               # Example for table, show lighter background, change color of text and smaller size.
               Media(min=self.C.M_TABLET_MIN, max=self.C.M_TABLET_MAX, width=Perc(100),
                   backgroundcolor=s.backgroundColorTablet, margin=0,
                   color=s.colorTablet, fontsize=s.fontSizeTablet),
               # For mobile, even more lighter background, change color of text and smaller size.
               Media(max=self.C.M_MOBILE_MAX, margin=0, width=Perc(100),
                   backgroundcolor=s.backgroundColorMobile, color=s.colorMobile, 
                   fontsize=s.fontSizeMobile),
            ))
        b.h1(fontsize=s.h1Size)
        b.text('Headline')
        b._h1()
        b.p()
        b.text(self.LORUMIPSUM)
        b._p()
        b._div()
        
class SimpleResponsivePage(Theme):
    u"""The <b>SimpleResponsivePage</b> class implements a simple page with a text and an image."""
    # Get Constants->Config as class variable, so inheriting classes can redefine values.
    C = Theme.C

    TITLE = u'The simple responsive text page.' # Use as title of window.

    BODYFONT = 'Georgia'
    CAPTIONFONT = BODYFONT

    BLUEPRINT = BluePrint(
        # Body
        bodyFontFamily=BODYFONT, doc_fontFamily=u'Page body font family.',                          
        bodyFontSize=Px(12), doc_bodyFontSize=u'Body font size.',
        bodyLineHeight=Em(1.4), doc_bodyLineHeight=u'Body line height.',
        pageBackgroundColor='white', doc_pageBackgroundColor=u"Page background color.",
    )
    def baseStyle(self):
        u"""Answer the single basis style that will be defined as overall CSS, before
        specific block definitions start."""
        s = self.BLUEPRINT
        root = self.newStyle() # Create root style
        root.addStyle('body', fontfamily=s.bodyFontFamily, fontsize=s.bodyFontSize,
            backgroundcolor=s.pageBackgroundColor, lineheight=s.lineHeight)
        root.addStyle('div', display=self.C.BLOCK)
        return root
        
    def baseComponents(self):
        u"""Create a theme site with just one single template home page. Answer a list
        of page instances that are used as templates for this site."""
        # Create an instance (=object) of the text component to be placed on the page.
        hw = SimpleResponsiveText()
        container = Container(components=hw) # Makes container-div and row-div
        # Create an instance (=object) of the page, containing the "hw" component.
        # The class is also the page name in the url.
        homePage = Page(class_=self.C.TEMPLATE_INDEX, components=container, title=self.TITLE)
        # Answer a list of types of pages for this site.
        return [homePage]

    def make(self, root=None):
        u"""The instance of this class builds CSS and HTML files at the optional path <b>root</b>.
        If not defined, then the default ~/Desktop/Xierpa3Examples/[component.name] is used as export path,
        as set by Builder.DEFAULT_ROOTPATH"""
        # Create an "instance" (=object) of type "HelloWorldLayout". The type (=class) defines
        # the behavior of the object that is made by calling the class.

        # C S S
        # Create the main CSS builder instance to build the SASS/CSS part of the site.
        cssBuilder = CssBuilder()
        # Compile (=build) the SCSS to CSS and save the file in "css/style.css".
        self.build(cssBuilder) # Build from entire site theme, not just from template. Result is stream in builder.
        cssBuilder.save(self, root) 
    
        # H T M L
        # Create the main HTML builder instance to build the HTML part of the site.
        htmlBuilder = HtmlBuilder()
        # Compile the HTML and save the resulting HTML file in "helloWorld.html".
        self.build(htmlBuilder) # Build from entire site theme, not just from template. Result is stream in builder.
        # Answer the path, so we can directly open the file with a browser.
        return htmlBuilder.save(self, root)  
    
if __name__ == '__main__':
    # This construction "__name__ == '__main__'" makes this Python file only 
    # be executed when called in direct mode, such as "python make.py" in the terminal.         
    # Since no rootPath is added to make(), the file export is in ~/Desktop/Xierpa3Examples/SimpleResponsivePage/   
    path = SimpleResponsivePage().make()
    webbrowser.open(path)
