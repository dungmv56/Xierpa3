# -*- coding: UTF-8 -*-
# -----------------------------------------------------------------------------
#    xierpa server
#    Copyright (c) 2014+  buro@petr.com, www.petr.com, www.xierpa.com
#    
#    X I E R P A  3
#    Distribution by the MIT License.
#
# -----------------------------------------------------------------------------
#
#    run.py
#
#    Demo site for the simple "navigation" example.
#    The "run.py" program creates the files:
#        files/css/style.scss
#        files/css/style.css
#        files/oneColumnSite.html
#    from the one OneColumnSite theme instance by applying respectively the
#    CssBuilder and HtmlBuilder to the theme.
#    Each of the builders takes the information from the theme to build its
#    own type of file.
#
from xierpa3.constants.constants import C
from xierpa3.attributes import Em, Margin
from xierpa3.components import Theme, Page, Column
from xierpa3.builders.cssbuilder import CssBuilder
from xierpa3.builders.htmlbuilder import HtmlBuilder

class ExampleColumn(Column):
    
    def buildBlock(self, b):
        u"""Build the column. Note that although the "div" suggest that it is just
        HTML building there, the method get called both with <b>b</b> as CssBuilder
        and as HtmlBuilder. Each builder will filter out the appropriate attributes and
        translates it into its own syntax. The HTML tags generated by the article
        are set in CSS by the empty statements."""
        b.div(class_='column', color='#222', margin=Margin(0, C.AUTO, 0, C.AUTO), 
              width='50%', maxwidth=700, minwidth=300, backgroundcolor='#EEE', 
              padding=Em(2), fontfamily='Georgia', fontsize=Em(1), 
              lineheight=Em(1.4))
        # Since the self.adapter.getArticle answers an article that already 
        # includes XHTML tags, we cannot do the styling there. In order to 
        # define the unique CSS styles, a blank document content is created 
        # for the CssBuilder to evaluate, so we have all the definitions inside 
        # div.column, in case they are used in the article.
        if b.isType(C.TYPE_CSS):
            self.buildCssColumnTemplate(b)
        else:
            for item in self.adapter.getArticle(self).items:
                b.text(item)
        b._div()
        
    def buildCssColumnTemplate(self, b):
        u"""Build the single CSS for all expected tags in an article that is answered
        by <b>self.adapter</b>. We cannot check on that here, since the content may
        vary and even is hidden by e.g. calls to a PHP adapter.""" 
        b.p(textindent=Em(1))
        # Main paragraphs have an indent.
        b._p()
        b.p(class_='start', textindent=0)
        # The start paragraph (the element before was not a <p>) has no indent.
        b._p()
        b.p(class_='end', fontweight=C.BOLD, marginbottom=Em(1),
            margintop=Em(0.5), textindent=0)
        # Mark the end paragraph (the element after is not a <p>) in case something
        # special needs to be done, e.g. change the marginbottom.
        b._p()
        b.blockquote(margin=Em(1), fontsize=Em(1.2), lineheight=Em(1.3),
            fontstyle=C.ITALIC)
        # Italic blockquotes with an indent.
        b._blockquote()

class OneColumnSite(Theme):
    u"""The <b>TextColumn</b> generates an HTML file with a column of random blurb text. 
    Double click the generated file or drag to a browser see the result."""
    TITLE = u'The navigation example page.' # Use as title of window.

    # The single column is filled by the self.adapter article query result.
    # The default self.adapter (if nothing else is defined) is the BlurbAdapter,
    # which generates random pieces of text.
    
    def getRootPath(self):
        u"""Get the root path for the "files/" directory, so the builder knows where to 
        write the HTML file."""
        from xierpa3.sites.examples import onecolumnsite
        return onecolumnsite.__path__[0]

    def baseComponents(self):
        u"""Create a theme site with just one single template home page. Answer a list
        of page instances that are used as templates for this site."""
        # Create an instance (=object) of components to be placed on the page.
        column = ExampleColumn()
        # Create an instance (=object) of the page, containing the navigation components.
        homePage = Page(components=(column,), title=self.TITLE)
        # Answer a list of types of pages for this site. In this case just one template.
        return [homePage]
    
if __name__ == '__main__':
    # This construction "__name__ == '__main__'" makes the Python file only 
    # be executed when called in direct mode, such as "python run.py" in the terminal. 
    
    # Create an "instance" (=object) of type "OneColumnSite". The type (=class) defines
    # the behavior of the object that is made by calling the class.
    oneColumnSite = OneColumnSite()
    
    # C S S
    # Create the main CSS builder instance to build the CSS part of the site with.
    cssBuilder = CssBuilder()
    # Compile (=build) the SCSS to CSS and save the file.
    cssBuilder.save(oneColumnSite) 

    # H T M L
    # Create the main HTML builder instance to build the HTML part of the site with.
    htmlBuilder = HtmlBuilder()
    # Compile the HTML and save the resulting HTML file in "files/oneColumnSite.html".
    htmlBuilder.save(oneColumnSite) 
